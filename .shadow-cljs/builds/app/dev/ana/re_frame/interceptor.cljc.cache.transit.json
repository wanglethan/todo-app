["^ ","~:output",["^ ","~:js","goog.provide('re_frame.interceptor');\nre_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\nre_frame.interceptor.interceptor_QMARK_ = (function re_frame$interceptor$interceptor_QMARK_(m){\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(re_frame.interceptor.mandatory_interceptor_keys,cljs.core.set(cljs.core.keys(m)))));\n});\nre_frame.interceptor.__GT_interceptor = (function re_frame$interceptor$__GT_interceptor(var_args){\nvar args__4777__auto__ = [];\nvar len__4771__auto___38161 = arguments.length;\nvar i__4772__auto___38162 = (0);\nwhile(true){\nif((i__4772__auto___38162 < len__4771__auto___38161)){\nargs__4777__auto__.push((arguments[i__4772__auto___38162]));\n\nvar G__38163 = (i__4772__auto___38162 + (1));\ni__4772__auto___38162 = G__38163;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4778__auto__ = ((((0) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((0)),(0),null)):null);\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__4778__auto__);\n});\n\n(re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__38117){\nvar map__38118 = p__38117;\nvar map__38118__$1 = cljs.core.__destructure_map(map__38118);\nvar m = map__38118__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__38118__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__38118__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__38118__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\nif(re_frame.interop.debug_enabled_QMARK_){\nvar temp__5733__auto___38166 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.mandatory_interceptor_keys));\nif(temp__5733__auto___38166){\nvar unknown_keys_38167 = temp__5733__auto___38166;\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_38167], 0));\n} else {\n}\n} else {\n}\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__4160__auto__ = id;\nif(cljs.core.truth_(or__4160__auto__)){\nreturn or__4160__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\n}\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\n}));\n\n(re_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq38116){\nvar self__4759__auto__ = this;\nreturn self__4759__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq38116));\n}));\n\nre_frame.interceptor.get_effect = (function re_frame$interceptor$get_effect(var_args){\nvar G__38124 = arguments.length;\nswitch (G__38124) {\ncase 1:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\n}));\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\n}));\n\n(re_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3);\n\nre_frame.interceptor.assoc_effect = (function re_frame$interceptor$assoc_effect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\n});\nre_frame.interceptor.update_effect = (function re_frame$interceptor$update_effect(var_args){\nvar args__4777__auto__ = [];\nvar len__4771__auto___38176 = arguments.length;\nvar i__4772__auto___38177 = (0);\nwhile(true){\nif((i__4772__auto___38177 < len__4771__auto___38176)){\nargs__4777__auto__.push((arguments[i__4772__auto___38177]));\n\nvar G__38179 = (i__4772__auto___38177 + (1));\ni__4772__auto___38177 = G__38179;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4778__auto__ = ((((3) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4778__auto__);\n});\n\n(re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),f,args);\n}));\n\n(re_frame.interceptor.update_effect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(re_frame.interceptor.update_effect.cljs$lang$applyTo = (function (seq38125){\nvar G__38126 = cljs.core.first(seq38125);\nvar seq38125__$1 = cljs.core.next(seq38125);\nvar G__38127 = cljs.core.first(seq38125__$1);\nvar seq38125__$2 = cljs.core.next(seq38125__$1);\nvar G__38128 = cljs.core.first(seq38125__$2);\nvar seq38125__$3 = cljs.core.next(seq38125__$2);\nvar self__4758__auto__ = this;\nreturn self__4758__auto__.cljs$core$IFn$_invoke$arity$variadic(G__38126,G__38127,G__38128,seq38125__$3);\n}));\n\nre_frame.interceptor.get_coeffect = (function re_frame$interceptor$get_coeffect(var_args){\nvar G__38132 = arguments.length;\nswitch (G__38132) {\ncase 1:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3);\n\nre_frame.interceptor.assoc_coeffect = (function re_frame$interceptor$assoc_coeffect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\n});\nre_frame.interceptor.update_coeffect = (function re_frame$interceptor$update_coeffect(var_args){\nvar args__4777__auto__ = [];\nvar len__4771__auto___38206 = arguments.length;\nvar i__4772__auto___38207 = (0);\nwhile(true){\nif((i__4772__auto___38207 < len__4771__auto___38206)){\nargs__4777__auto__.push((arguments[i__4772__auto___38207]));\n\nvar G__38208 = (i__4772__auto___38207 + (1));\ni__4772__auto___38207 = G__38208;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4778__auto__ = ((((3) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4778__auto__);\n});\n\n(re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\n}));\n\n(re_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(re_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq38136){\nvar G__38137 = cljs.core.first(seq38136);\nvar seq38136__$1 = cljs.core.next(seq38136);\nvar G__38138 = cljs.core.first(seq38136__$1);\nvar seq38136__$2 = cljs.core.next(seq38136__$1);\nvar G__38139 = cljs.core.first(seq38136__$2);\nvar seq38136__$3 = cljs.core.next(seq38136__$2);\nvar self__4758__auto__ = this;\nreturn self__4758__auto__.cljs$core$IFn$_invoke$arity$variadic(G__38137,G__38138,G__38139,seq38136__$3);\n}));\n\nre_frame.interceptor.invoke_interceptor_fn = (function re_frame$interceptor$invoke_interceptor_fn(context,interceptor,direction){\nvar temp__5733__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar f = temp__5733__auto__;\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\n} else {\nreturn context;\n}\n});\n/**\n * Loop over all interceptors, calling `direction` function on each,\n *   threading the value of `context` through every call.\n * \n *   `direction` is one of `:before` or `:after`.\n * \n *   Each iteration, the next interceptor to process is obtained from\n *   context's `:queue`. After they are processed, interceptors are popped\n *   from `:queue` and added to `:stack`.\n * \n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\n *   contain all interceptors processed.\n * \n *   Returns updated `context`. Ie. the `context` which has been threaded\n *   through all interceptor functions.\n * \n *   Generally speaking, an interceptor's `:before` function will (if present)\n *   add to a `context's` `:coeffects`, while its `:after` function\n *   will modify the `context`'s `:effects`.  Very approximately.\n * \n *   But because all interceptor functions are given `context`, and can\n *   return a modified version of it, the way is clear for an interceptor\n *   to introspect the stack or queue, or even modify the queue\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\n */\nre_frame.interceptor.invoke_interceptors = (function re_frame$interceptor$invoke_interceptors(context,direction){\nvar context__$1 = context;\nwhile(true){\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\nif(cljs.core.empty_QMARK_(queue)){\nreturn context__$1;\n} else {\nvar interceptor = cljs.core.peek(queue);\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\nvar G__38212 = re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\ncontext__$1 = G__38212;\ncontinue;\n}\nbreak;\n}\n});\nre_frame.interceptor.enqueue = (function re_frame$interceptor$enqueue(context,interceptors){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,re_frame.interop.empty_queue),interceptors);\n});\n/**\n * Create a fresh context\n */\nre_frame.interceptor.context = (function re_frame$interceptor$context(var_args){\nvar G__38150 = arguments.length;\nswitch (G__38150) {\ncase 2:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\nreturn re_frame.interceptor.enqueue(re_frame.interceptor.assoc_coeffect(re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403),event),interceptors);\n}));\n\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\n}));\n\n(re_frame.interceptor.context.cljs$lang$maxFixedArity = 3);\n\n/**\n * Called on completion of `:before` processing, this function prepares/modifies\n * `context` for the backwards sweep of processing in which an interceptor\n * chain's `:after` fns are called.\n * \n *   At this point in processing, the `:queue` is empty and `:stack` holds all\n *   the previously run interceptors. So this function enables the backwards walk\n *   by priming `:queue` with what's currently in `:stack`\n */\nre_frame.interceptor.change_direction = (function re_frame$interceptor$change_direction(context){\nreturn re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\n});\n/**\n * Executes the given chain (coll) of interceptors.\n * \n * Each interceptor has this form:\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\n * \n * Walks the queue of interceptors from beginning to end, calling the\n * `:before` fn on each, then reverse direction and walk backwards,\n * calling the `:after` fn on each.\n * \n * The last interceptor in the chain presumably wraps an event\n * handler fn. So the overall goal of the process is to \"handle\n * the given event\".\n * \n * Thread a `context` through all calls. `context` has this form:\n * \n *   {:coeffects {:event [:a-query-id :some-param]\n *                :db    <original contents of app-db>}\n *    :effects   {:db    <new value for app-db>\n *                :dispatch  [:an-event-id :param1]}\n *    :queue     <a collection of further interceptors>\n *    :stack     <a collection of interceptors already walked>}\n * \n * `context` has `:coeffects` and `:effects` which, if this was a web\n * server, would be somewhat analogous to `request` and `response`\n * respectively.\n * \n * `coeffects` will contain data like `event` and the initial\n * state of `db` -  the inputs required by the event handler\n * (sitting presumably on the end of the chain), while handler-returned\n * side effects are put into `:effects` including, but not limited to,\n * new values for `db`.\n * \n * The first few interceptors in a chain will likely have `:before`\n * functions which \"prime\" the `context` by adding the event, and\n * the current state of app-db into `:coeffects`. But interceptors can\n * add whatever they want to `:coeffects` - perhaps the event handler needs\n * some information from localstore, or a random number, or access to\n * a DataScript connection.\n * \n * Equally, some interceptors in the chain will have `:after` fn\n * which can process the side effects accumulated into `:effects`\n * including but, not limited to, updates to app-db.\n * \n * Through both stages (before and after), `context` contains a `:queue`\n * of interceptors yet to be processed, and a `:stack` of interceptors\n * already done.  In advanced cases, these values can be modified by the\n * functions through which the context is threaded.\n */\nre_frame.interceptor.execute = (function re_frame$interceptor$execute(event_v,interceptors){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__38014__auto___38217 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__38014__auto___38217);\n\n} else {\n}\n\nreturn re_frame.interceptor.invoke_interceptors(re_frame.interceptor.change_direction(re_frame.interceptor.invoke_interceptors(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react-dom","~$module$node_modules$react_dom$index","~$react","~$module$node_modules$react$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^O","~$re-frame.interop","^P","~$re-frame.trace","^Q","~$trace","^Q","~$clojure.set","^S","~$set","^S","~$cljs.core","^U","~$goog","^V"],"~:seen",["^H",["~:require"]],"~:uses",["^ ","~$console","^O","~$empty-queue","^P","~$debug-enabled?","^P"],"~:require-macros",["^ ","^Q","^Q","^R","^Q","^U","^U"],"~:form",["~#list",["~$ns","^J",["^13",["^X",["^O","~:refer",["^Z"]],["^P","^15",["^[","^10"]],["^Q","~:as","^R","~:include-macros",true],["^S","^16","^T"]]]]],"~:flags",["^ ","^X",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^V","^U","^O","^P","^Q","^S"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","re_frame/interceptor.cljc"],"~:compiled-at",1621351954963,"~:resource-name","re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns re-frame.interceptor\n  (:require\n    [re-frame.loggers :refer [console]]\n    [re-frame.interop :refer [empty-queue debug-enabled?]]\n    [re-frame.trace :as trace :include-macros true]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after})\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n   (-> {}\n      (assoc-coeffect :event event)\n      ;; Some interceptors, like `trim-v` and `unwrap`, alter event so capture\n      ;; the original for use cases such as tracing.\n      (assoc-coeffect :original-event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (trace/merge-trace!\n    {:tags {:interceptors interceptors}})\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_","cljs.core/keys","cljs.core/set","var_args","args__4777__auto__","len__4771__auto__","i__4772__auto__","argseq__4778__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","p__38117","map__38118","cljs.core/--destructure-map","cljs.core.get","seq38116","self__4759__auto__","cljs.core/seq","id","before","after","re-frame.interop/debug-enabled?","temp__5733__auto__","unknown-keys","clojure.set.difference","re_frame.loggers.console","or__4160__auto__","G__38124","re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in","not-found","re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","re-frame.interceptor/update-effect","seq38125","G__38126","cljs.core/first","cljs.core/next","G__38127","G__38128","self__4758__auto__","f","args","cljs.core.apply","cljs.core/update-in","G__38132","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","seq38136","G__38137","G__38138","G__38139","re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc","cljs.core/pop","cljs.core.conj","re-frame.interceptor/enqueue","interceptors","cljs.core.update","cljs.core.fnil","cljs.core/into","re-frame.interop/empty-queue","G__38150","re-frame.interceptor/context","event","db","re_frame.interceptor.context","re-frame.interceptor/change-direction","cljs.core.dissoc","re-frame.interceptor/execute","event-v","re-frame.trace/is-trace-enabled?","new-trace__38014__auto__","cljs.core.merge","re-frame.trace/*current-trace*","cljs.core/merge"]],"~:used-vars",["^H",["~$re-frame.interceptor/context","~$re-frame.interceptor/get-effect","~$cljs.core/=","~$cljs.core/keys","~$re-frame.interceptor/execute","~$re-frame.interceptor/->interceptor","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.loggers/console","~$cljs.core/dissoc","~$re-frame.interceptor/update-effect","~$cljs.core/pop","~$re-frame.interceptor/invoke-interceptors","~$cljs.core/set","~$cljs.core/empty?","~$re-frame.interceptor/enqueue","~$cljs.core/fnil","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/update","~$cljs.core/get-in","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$re-frame.interceptor/assoc-coeffect","~$re-frame.interceptor/change-direction","~$re-frame.trace/*current-trace*","~$re-frame.interceptor/get-coeffect","~$re-frame.interop/empty-queue","~$re-frame.interceptor/assoc-effect","~$re-frame.interceptor/interceptor?","~$cljs.core/assoc","~$cljs.core/assoc-in","~$re-frame.interop/debug-enabled?","~$cljs.core/update-in","~$re-frame.interceptor/invoke-interceptor-fn","~$js/Error","~$re-frame.interceptor/mandatory-interceptor-keys"]]],"~:cache-keys",["~#cmap",[["^1<","reagent/impl/batching.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^V","^U","~$reagent.debug","~$reagent.impl.util"]]],["^1<","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.dom.HtmlElement"]]],["^1<","goog/labs/useragent/platform.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.labs.userAgent.util","~$goog.string"]]],["^1<","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.array","~$goog.asserts"]]],["^1<","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1<","goog/events/eventtype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1<","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2M","^2K","~$goog.object","~$goog.string.internal"]]],["^1<","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2N","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2R"]]],["^1<","re_frame/loggers.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^U","^S"]]],["^1<","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2N"]]],["^1<","reagent/impl/util.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^U","~$clojure.string","~$clojure.walk","^2Q","^2H"]]],["^1<","goog/useragent/useragent.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2K","~$goog.reflect","^2L"]]],["^1<","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1<","goog/events/events.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2N","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2O","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","~$goog.events.EventId","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^1<","goog/events/browserfeature.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2P"]]],["^1<","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1<","reagent/ratom.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^U","^2I","^2H","~$reagent.impl.batching","^S","^2Q"]]],["^1<","re_frame/interop.cljs"],["b153aa5637718f7ef415049480b003bb00fd359b","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^U","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1<","goog/events/eventtarget.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.Disposable","^2N","^3?","~$goog.events.Event","^35","^36","^2Q","^38","^39","^3;"]]],["^1<","goog/disposable/disposable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.disposable.IDisposable"]]],["^1<","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","39149bb2f5bbdb878453e592f8d1e15a126e08f5","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1<","shadow/js.js"],["ed0620148264e466124083210bc3b01c392ab5dc","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1<","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1<","reagent/impl/template.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^U","^E","^2Y","^2I","~$reagent.impl.component","^3=","~$reagent.impl.input","~$reagent.impl.protocols","^3A","^2H","^2Q"]]],["^1<","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2N"]]],"~:SHADOW-TIMESTAMP",[1621292291000,1621292291000,1620741473000],["^3E","node_modules/react/cjs/react.development.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","39149bb2f5bbdb878453e592f8d1e15a126e08f5","2d5bc5b3fb2e19279e31e634b0695b1fd96a54f3","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^3F","~$module$node_modules$object_assign$index"]]],["^1<","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2N","^32"]]],["^1<","goog/events/listener.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^3;","^35"]]],["^1<","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2N","~$goog.fs.blob","^2S","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2U","^2V","^2W","^2X"]]],["^1<","goog/debug/tracer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2M","^2N","~$goog.debug","~$goog.debug.Logger","~$goog.iter","~$goog.log","~$goog.structs.Map","~$goog.structs.SimplePool"]]],["^1<","goog/events/listenermap.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2M","^3<","^2Q","^38","^35","^3;"]]],["^1<","goog/events/eventid.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1<","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1<","goog/events/eventwrapper.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.events.EventHandler","~$goog.events.ListenableType"]]],["^1<","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1<","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2M","^2N","~$goog.html.SafeUrl","^2W","^2X","^2R"]]],["^1<","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2N","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3O","~$goog.html.SafeStyle","^3Y","^2T","~$goog.html.uncheckedconversions","^2W","^2R"]]],["^1<","reagent/impl/component.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^U","^2Q","^E","^2I","^3=","^3K","^3A","^2H"]]],["^1<","clojure/walk.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^U"]]],["^1<","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1<","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2M","^2N","~$goog.dom.TagName","~$goog.dom.tags","^3O","^41","~$goog.html.SafeStyleSheet","^3Y","^2T","^3P","^2U","^2V","^2[","^2Q","^2W","^2X","^2R"]]],["^1<","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2Q"]]],["^1<","goog/math/size.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1<","goog/labs/useragent/engine.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2M","^2K","^2L"]]],["^1<","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2M"]]],["^1<","goog/dom/dom.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2M","^2N","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^45","~$goog.dom.safe","^40","^42","~$goog.math.Coordinate","~$goog.math.Size","^2Q","^2L","^2W","~$goog.string.Unicode","^2P"]]],["^1<","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.debug.Error","^49"]]],["^1<","reagent/impl/protocols.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^U"]]],["^1<","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2M","^2N","^2L","~$goog.structs","^3U","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1<","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^3E","node_modules/object-assign/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","39149bb2f5bbdb878453e592f8d1e15a126e08f5","519ffd5a4c91b67302cc9947b794966d629860cd","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^3F"]]],["^1<","goog/debug/errorhandler.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^3B","^2N","^3Q","~$goog.debug.EntryPointMonitor","^4>","~$goog.debug.Trace"]]],["^1<","goog/disposable/idisposable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1<","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1<","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",[]]],["^1<","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2M","^2Q"]]],["^1<","clojure/string.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^U","^2L","~$goog.string.StringBuffer"]]],["^3E","node_modules/react/cjs/react.production.min.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","39149bb2f5bbdb878453e592f8d1e15a126e08f5","6093d43b27c84de58b9ce55e3a930469339c9e54","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^3F","^3M"]]],["^1<","goog/debug/entrypointregistry.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2N"]]],["^1<","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^4:","^42","^2W","^2R"]]],["^1<","re_frame/interceptor.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^U","^O","^P","^Q","^S"]]],["^1<","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1<","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2R"]]],["^1<","reagent/core.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^U","^E","~$reagent.impl.template","^3I","^2I","^3=","^3K","^3A","^2H"]]],["^1<","goog/debug/debug.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2M","~$goog.debug.errorcontext","^2P"]]],["^1<","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1<","goog/math/coordinate.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.math"]]],["^1<","goog/debug/errorcontext.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1<","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2M","^2N","^3[","^4H"]]],["^1<","goog/async/nexttick.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^33","~$goog.dom","^45","^3[","^2[","^30"]]],["^1<","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2N","^40","^3O","^41","^47","^3Y","^2T","^2W","^2R","^2U"]]],["^1<","goog/debug/logger.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^3Q","^3T","~$goog.log.Level","~$goog.log.LogRecord","~$goog.log.Logger"]]],["^1<","reagent/impl/input.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^U","^3I","^3=","^3K"]]],["^1<","goog/events/event.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^3B","^38"]]],["^1<","goog/events/eventhandler.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^3B","^3?","^2Q","^3C","^38","~$goog.events.EventTarget","^3:"]]],["^1<","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1<","cljs/core.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.math.Long","~$goog.math.Integer","^2L","^2Q","^2M","~$goog.Uri","^4E"]]],["^1<","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2W","^2X","^3P","^2N"]]],["^1<","goog/log/log.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2N","^3Q"]]],["^1<","reagent/debug.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^U"]]],["^1<","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2W","^41","^2X","^2M","^2Q","^2N","^2R"]]],["^1<","goog/events/browserevent.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^3Q","^2O","^3C","~$goog.events.EventType","^32","^2P"]]],["^1<","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^32"]]],["^1<","goog/structs/simplepool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^3B"]]],["^1<","goog/dom/browserfeature.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2P"]]],["^1<","clojure/set.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^U"]]],["^1<","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2N","^2L"]]],["^1<","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2N","^2X"]]],["^1<","goog/events/listenable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^38","^39"]]],["^1<","re_frame/trace.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^U","^P","^O","^3["]]]]],"~:clj-info",["^ ","jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map.clj",1620741473000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1620657351000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1620657351000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/externs.clj",1620741473000,"jar:file:/Users/ethanlunwang/.m2/repository/reagent/reagent/1.0.0/reagent-1.0.0.jar!/reagent/debug.clj",1620741482000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1621292282000,"jar:file:/Users/ethanlunwang/.m2/repository/re-frame/re-frame/1.2.0/re-frame-1.2.0.jar!/re_frame/interop.clj",1621350719000,"jar:file:/Users/ethanlunwang/.m2/repository/reagent/reagent/1.0.0/reagent-1.0.0.jar!/reagent/interop.clj",1620741482000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1620657351000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer/impl.cljc",1620741473000,"jar:file:/Users/ethanlunwang/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1621292288000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64.clj",1620741473000,"jar:file:/Users/ethanlunwang/.m2/repository/binaryage/devtools/1.0.3/devtools-1.0.3.jar!/devtools/defaults.clj",1621292288000,"jar:file:/Users/ethanlunwang/.m2/repository/re-frame/re-frame/1.2.0/re-frame-1.2.0.jar!/re_frame/trace.cljc",1621350719000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/tagged_literals.cljc",1620741473000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/core.cljc",1620741473000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1620741470000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/util.cljc",1620741473000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/compiler.cljc",1620741473000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1620741470000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1620657351000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1620657351000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1620741470000,"jar:file:/Users/ethanlunwang/.m2/repository/reagent/reagent/1.0.0/reagent-1.0.0.jar!/reagent/core.clj",1620741482000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1620657351000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64_vlq.clj",1620741473000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/js_deps.cljc",1620741473000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/instant.clj",1620741473000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer.cljc",1620741473000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/env.cljc",1620741473000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1620741470000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1620741470000,"jar:file:/Users/ethanlunwang/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1620657351000,"jar:file:/Users/ethanlunwang/.m2/repository/reagent/reagent/1.0.0/reagent-1.0.0.jar!/reagent/ratom.clj",1620741482000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^P","^Q","^Q","^R","^Q","^S","^S","^T","^S","^U","^U","^V","^V"],"^W",["^H",["^X"]],"~:shadow/js-access-global",["^H",["Error"]],"^Y",["^ ","^Z","^O","^[","^P","^10","^P"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",42,"^8",7,"^9",42,"^:",20,"~:arglists",["^13",["~$quote",["^13",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^13",["^5P","^5Q","~$f","^5R"]]],"^5N",["^13",[["^5P","^5Q","~$f","~$&","^5R"]]],"~:arglists-meta",["^13",[null]]]],"^I","^1R","^6","re_frame/interceptor.cljc","^:",20,"^5S",["^ ","^5T",true,"^5U",3,"^5V",3,"^5W",[["^13",["^5P","^5Q","~$f","^5R"]]],"^5N",["^13",[["^5P","^5Q","~$f","~$&","^5R"]]],"^5X",["^13",[null]]],"^5W",[["^13",["^5P","^5Q","~$f","^5R"]]],"~:protocol-impl",null,"^5U",3,"^5X",["^13",[null]],"^8",1,"^5T",true,"~:methods",[["^ ","^5U",3,"^5T",true,"~:tag","~$any"]],"^7",42,"~:ret-tag","^60","^9",42,"^5V",3,"~:fn-var",true,"^5N",["^13",[["^5P","^5Q","~$f","~$&","^5R"]]]],"~$invoke-interceptors",["^ ","^5M",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",74,"^8",8,"^9",74,"^:",27,"~:private",true,"^5N",["^13",["^5O",["^13",[["^5P","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^64",true,"^I","^1T","^6","re_frame/interceptor.cljc","^:",27,"^5W",["^13",[["^5P","^65"]]],"^5Y",null,"^5X",["^13",[null,null]],"^8",1,"^5T",false,"^7",74,"^9",74,"^5V",2,"^62",true,"^5N",["^13",["^5O",["^13",[["^5P","^65"]]]]],"^66","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^5M",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",56,"^8",7,"^9",56,"^:",21,"^5N",["^13",["^5O",["^13",[["^5P","^5Q","~$value"]]]]]],"^I","^24","^6","re_frame/interceptor.cljc","^:",21,"^5W",["^13",[["^5P","^5Q","^68"]]],"^5Y",null,"^5X",["^13",[null,null]],"^8",1,"^5T",false,"^7",56,"^61",["^H",["~$clj","^60"]],"^9",56,"^5V",3,"^62",true,"^5N",["^13",["^5O",["^13",[["^5P","^5Q","^68"]]]]]],"~$update-coeffect",["^ ","^5M",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",60,"^8",7,"^9",60,"^:",22,"^5N",["^13",["^5O",["^13",[["^5P","^5Q","~$f","~$&","^5R"]]]]],"^5S",["^ ","^5T",true,"^5U",3,"^5V",3,"^5W",[["^13",["^5P","^5Q","~$f","^5R"]]],"^5N",["^13",[["^5P","^5Q","~$f","~$&","^5R"]]],"^5X",["^13",[null]]]],"^I","^22","^6","re_frame/interceptor.cljc","^:",22,"^5S",["^ ","^5T",true,"^5U",3,"^5V",3,"^5W",[["^13",["^5P","^5Q","~$f","^5R"]]],"^5N",["^13",[["^5P","^5Q","~$f","~$&","^5R"]]],"^5X",["^13",[null]]],"^5W",[["^13",["^5P","^5Q","~$f","^5R"]]],"^5Y",null,"^5U",3,"^5X",["^13",[null]],"^8",1,"^5T",true,"^5Z",[["^ ","^5U",3,"^5T",true,"^5[","^60"]],"^7",60,"^61","^60","^9",60,"^5V",3,"^62",true,"^5N",["^13",[["^5P","^5Q","~$f","~$&","^5R"]]]],"~$invoke-interceptor-fn",["^ ","^5M",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",67,"^8",8,"^9",67,"^:",29,"^64",true,"^5N",["^13",["^5O",["^13",[["^5P","~$interceptor","^65"]]]]]],"^64",true,"^I","^2?","^6","re_frame/interceptor.cljc","^:",29,"^5W",["^13",[["^5P","^6<","^65"]]],"^5Y",null,"^5X",["^13",[null,null]],"^8",1,"^5T",false,"^7",67,"^61",["^H",[null,"^60"]],"^9",67,"^5V",3,"^62",true,"^5N",["^13",["^5O",["^13",[["^5P","^6<","^65"]]]]]],"~$get-effect",["^ ","^5M",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",30,"^8",7,"^9",30,"^:",17,"^5N",["^13",["^5O",["^13",[["^5P"],["^5P","^5Q"],["^5P","^5Q","~$not-found"]]]]],"^5S",["^ ","^5T",false,"^5U",3,"^5V",3,"^5W",[["^5P"],["^5P","^5Q"],["^5P","^5Q","^6>"]],"^5N",["^13",[["^5P"],["^5P","^5Q"],["^5P","^5Q","^6>"]]],"^5X",["^13",[null,null,null]]]],"^I","^1I","^6","re_frame/interceptor.cljc","^:",17,"^5S",["^ ","^5T",false,"^5U",3,"^5V",3,"^5W",[["^5P"],["^5P","^5Q"],["^5P","^5Q","^6>"]],"^5N",["^13",[["^5P"],["^5P","^5Q"],["^5P","^5Q","^6>"]]],"^5X",["^13",[null,null,null]]],"^5W",[["^5P"],["^5P","^5Q"],["^5P","^5Q","^6>"]],"^5Y",null,"^5U",3,"^5X",["^13",[null,null,null]],"^8",1,"^5T",false,"^5Z",[["^ ","^5U",1,"^5T",false,"^5[","^60"],["^ ","^5U",2,"^5T",false,"^5[",["^H",[null,"^60"]]],["^ ","^5U",3,"^5T",false,"^5[",["^H",[null,"^60"]]]],"^7",30,"^9",30,"^5V",3,"^62",true,"^5N",["^13",[["^5P"],["^5P","^5Q"],["^5P","^5Q","^6>"]]]],"~$->interceptor",["^ ","^5M",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",17,"^8",7,"^9",17,"^:",20,"^5N",["^13",["^5O",["^13",[["~$&",["^ ","^16","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^5S",["^ ","^5T",true,"^5U",0,"^5V",0,"^5W",[["^13",[["^ ","^16","~$m","^6@",["^6A","^6B","^6C"]]]]],"^5N",["^13",[["~$&",["^ ","^16","~$m","^6@",["^6A","^6B","^6C"]]]]],"^5X",["^13",[null]]]],"^I","^1M","^6","re_frame/interceptor.cljc","^:",20,"^5S",["^ ","^5T",true,"^5U",0,"^5V",0,"^5W",[["^13",[["^ ","^16","~$m","^6@",["^6A","^6B","^6C"]]]]],"^5N",["^13",[["~$&",["^ ","^16","~$m","^6@",["^6A","^6B","^6C"]]]]],"^5X",["^13",[null]]],"^5W",[["^13",[["^ ","^16","~$m","^6@",["^6A","^6B","^6C"]]]]],"^5Y",null,"^5U",0,"^5X",["^13",[null]],"^8",1,"^5T",true,"^5Z",[["^ ","^5U",0,"^5T",true,"^5[","~$cljs.core/IMap"]],"^7",17,"^61","^60","^9",17,"^5V",0,"^62",true,"^5N",["^13",[["~$&",["^ ","^16","~$m","^6@",["^6A","^6B","^6C"]]]]]],"~$get-coeffect",["^ ","^5M",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",48,"^8",7,"^9",48,"^:",19,"^5N",["^13",["^5O",["^13",[["^5P"],["^5P","^5Q"],["^5P","^5Q","^6>"]]]]],"^5S",["^ ","^5T",false,"^5U",3,"^5V",3,"^5W",[["^5P"],["^5P","^5Q"],["^5P","^5Q","^6>"]],"^5N",["^13",[["^5P"],["^5P","^5Q"],["^5P","^5Q","^6>"]]],"^5X",["^13",[null,null,null]]]],"^I","^27","^6","re_frame/interceptor.cljc","^:",19,"^5S",["^ ","^5T",false,"^5U",3,"^5V",3,"^5W",[["^5P"],["^5P","^5Q"],["^5P","^5Q","^6>"]],"^5N",["^13",[["^5P"],["^5P","^5Q"],["^5P","^5Q","^6>"]]],"^5X",["^13",[null,null,null]]],"^5W",[["^5P"],["^5P","^5Q"],["^5P","^5Q","^6>"]],"^5Y",null,"^5U",3,"^5X",["^13",[null,null,null]],"^8",1,"^5T",false,"^5Z",[["^ ","^5U",1,"^5T",false,"^5[","^60"],["^ ","^5U",2,"^5T",false,"^5[",["^H",[null,"^60"]]],["^ ","^5U",3,"^5T",false,"^5[",["^H",[null,"^60"]]]],"^7",48,"^9",48,"^5V",3,"^62",true,"^5N",["^13",[["^5P"],["^5P","^5Q"],["^5P","^5Q","^6>"]]]],"~$execute",["^ ","^5M",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",146,"^8",7,"^9",146,"^:",14,"^5N",["^13",["^5O",["^13",[["~$event-v","~$interceptors"]]]]],"^66","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^I","^1L","^6","re_frame/interceptor.cljc","^:",14,"^5W",["^13",[["^6G","^6H"]]],"^5Y",null,"^5X",["^13",[null,null]],"^8",1,"^5T",false,"^7",146,"^61","^60","^9",146,"^5V",2,"^62",true,"^5N",["^13",["^5O",["^13",[["^6G","^6H"]]]]],"^66","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^5M",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",38,"^8",7,"^9",38,"^:",19,"^5N",["^13",["^5O",["^13",[["^5P","^5Q","^68"]]]]]],"^I","^29","^6","re_frame/interceptor.cljc","^:",19,"^5W",["^13",[["^5P","^5Q","^68"]]],"^5Y",null,"^5X",["^13",[null,null]],"^8",1,"^5T",false,"^7",38,"^61",["^H",["^69","^60"]],"^9",38,"^5V",3,"^62",true,"^5N",["^13",["^5O",["^13",[["^5P","^5Q","^68"]]]]]],"~$enqueue",["^ ","^5M",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",111,"^8",7,"^9",111,"^:",14,"^5N",["^13",["^5O",["^13",[["^5P","^6H"]]]]]],"^I","^1W","^6","re_frame/interceptor.cljc","^:",14,"^5W",["^13",[["^5P","^6H"]]],"^5Y",null,"^5X",["^13",[null,null]],"^8",1,"^5T",false,"^7",111,"^61",["^H",["^69","^60"]],"^9",111,"^5V",2,"^62",true,"^5N",["^13",["^5O",["^13",[["^5P","^6H"]]]]]],"~$mandatory-interceptor-keys",["^ ","^I","^2A","^6","re_frame/interceptor.cljc","^7",9,"^8",1,"^9",9,"^:",32,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",9,"^8",6,"^9",9,"^:",32],"^5[","~$cljs.core/ISet"],"~$interceptor?",["^ ","^5M",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",11,"^8",7,"^9",11,"^:",19,"^5N",["^13",["^5O",["^13",[["~$m"]]]]]],"^I","^2:","^6","re_frame/interceptor.cljc","^:",19,"^5W",["^13",[["~$m"]]],"^5Y",null,"^5X",["^13",[null,null]],"^8",1,"^5T",false,"^7",11,"^61","~$boolean","^9",11,"^5V",1,"^62",true,"^5N",["^13",["^5O",["^13",[["~$m"]]]]]],"~$change-direction",["^ ","^5M",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",132,"^8",8,"^9",132,"^:",24,"^64",true,"^5N",["^13",["^5O",["^13",[["^5P"]]]]],"^66","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^64",true,"^I","^25","^6","re_frame/interceptor.cljc","^:",24,"^5W",["^13",[["^5P"]]],"^5Y",null,"^5X",["^13",[null,null]],"^8",1,"^5T",false,"^7",132,"^61",["^H",["^69","^60"]],"^9",132,"^5V",1,"^62",true,"^5N",["^13",["^5O",["^13",[["^5P"]]]]],"^66","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^5P",["^ ","^5M",null,"^5",["^ ","^64",true,"^6","re_frame/interceptor.cljc","^:",15,"^5S",["^ ","^5T",false,"^5U",3,"^5V",3,"^5W",[["~$event","^6H"],["^6P","^6H","~$db"]],"^5N",["^13",[["^6P","^6H"],["^6P","^6H","^6Q"]]],"^5X",["^13",[null,null]]],"^8",8,"^7",118,"^9",118,"^5N",["^13",["^5O",["^13",[["^6P","^6H"],["^6P","^6H","^6Q"]]]]],"^66","Create a fresh context"],"^64",true,"^I","^1H","^6","re_frame/interceptor.cljc","^:",15,"^5S",["^ ","^5T",false,"^5U",3,"^5V",3,"^5W",[["^6P","^6H"],["^6P","^6H","^6Q"]],"^5N",["^13",[["^6P","^6H"],["^6P","^6H","^6Q"]]],"^5X",["^13",[null,null]]],"^5W",[["^6P","^6H"],["^6P","^6H","^6Q"]],"^5Y",null,"^5U",3,"^5X",["^13",[null,null]],"^8",1,"^5T",false,"^5Z",[["^ ","^5U",2,"^5T",false,"^5[",["^H",["^69","^60"]]],["^ ","^5U",3,"^5T",false,"^5[",["^H",["^69","^60"]]]],"^7",118,"^9",118,"^5V",3,"^62",true,"^5N",["^13",[["^6P","^6H"],["^6P","^6H","^6Q"]]],"^66","Create a fresh context"]],"^11",["^ ","^Q","^Q","^R","^Q","^U","^U"],"~:cljs.analyzer/constants",["^ ","^W",["^H",["~:unnamed","~:tags","~:original-event","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^6Y","^6Z","^74","^71","^6S","^6[","^72","^6W","^70","^6X","^6U","^6V","^6T","^73"]],"^18",["^ ","^X",["^H",[]]],"^19",["^ "],"^1:",["^V","^U","^O","^P","^Q","^S"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^2C",[["^78","~:static-fns"],true,["^78","~:shadow-tweaks"],null,["^78","~:source-map-inline"],null,["^78","~:elide-asserts"],false,["^78","~:optimize-constants"],null,["^78","^1?"],null,["^78","~:external-config"],null,["^78","~:tooling-config"],null,["^78","~:emit-constants"],null,["^78","~:load-tests"],null,["^78","~:form-size-threshold"],null,["^78","~:data-readers"],null,["^78","~:infer-externs"],"~:auto",["^78","^1A"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^78","~:fn-invoke-direct"],null,["^78","~:source-map"],"/dev/null"]]]