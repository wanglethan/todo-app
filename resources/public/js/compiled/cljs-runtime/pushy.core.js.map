{"version":3,"sources":["pushy/core.cljs"],"mappings":"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","names":["pushy.core/on-click","funk","goog.events/listen","js/document","pushy.core/update-history!","h","G__38371","pushy.core/set-retrieve-token!","t","path-prefix","location","pushy.core/set-create-url!","token","var_args","G__38384","pushy.core/new-history","js/Error","pushy.core.new_history","js/goog.history.Html5History.TokenTransformer","transformer","js/goog.history.Html5History","js/window","pushy$core$IHistory$set_token_BANG_$dyn","x__4463__auto__","m__4464__auto__","pushy.core/set-token!","goog/typeOf","m__4461__auto__","cljs.core/missing-protocol","G__38413","pushy$core$IHistory$replace_token_BANG_$dyn","pushy.core/replace-token!","G__38426","pushy$core$IHistory$get_token$dyn","pushy.core/get-token","pushy$core$IHistory$start_BANG_$dyn","pushy.core/start!","pushy$core$IHistory$stop_BANG_$dyn","pushy.core/stop!","pushy.core/IHistory","this","title","pushy.core/processable-url?","uri","clojure.string/blank?","cljs.core/not","cljs.core/re-matches","cljs.core/re-pattern","js/location","pushy.core/get-token-from-uri","path","query","cljs.core/empty?","args__4777__auto__","len__4771__auto__","i__4772__auto__","argseq__4778__auto__","cljs.core/IndexedSeq","pushy.core/pushy","p__38513","map__38518","cljs.core/--destructure-map","cljs.core.get","seq38504","G__38505","cljs.core/first","cljs.core/next","G__38506","self__4758__auto__","dispatch-fn","match-fn","processable-url?","identity-fn","prevent-default-when-no-match?","cljs.core/identity","cljs.core/constantly","history","event-keys","cljs.core.atom","js/pushy","js/pushy.core","js/pushy.core.t_pushy$core38519","pushy.core/t_pushy$core38519","_38521","meta38520","cljs.core/PROTOCOL_SENTINEL","this__4404__auto__","writer__4405__auto__","opt__4406__auto__","cljs.core/-write","pushy.core/->t_pushy$core38519","_","cljs.core.swap_BANG_","cljs.core/conj","goog.history.EventType/NAVIGATE","e","temp__5735__auto__","match","G__38549","G__38550","G__38551","G__38552","el","G__38553","js/goog.Uri","and__4149__auto__","cljs.core._EQ_","next-token","G__38554","temp__5733__auto__","seq__38555","cljs.core/seq","cljs.core/deref","chunk__38556","count__38557","i__38558","cljs.core/chunked-seq?","c__4591__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","key","goog.events/unlistenByKey","cljs.core/reset!","G__38566","pushy.core/supported?","pushy.core.supported_QMARK_","window","G__38569","pushy.core/push-state!","pushy.core.push_state_BANG_","pushy.core.pushy"],"sourcesContent":["(ns pushy.core\n  (:require [goog.events :as events]\n            [clojure.string])\n  (:import goog.History\n           goog.history.Html5History\n           goog.history.Html5History.TokenTransformer\n           goog.history.EventType\n           goog.Uri))\n\n(defn- on-click [funk]\n  (events/listen js/document \"click\" funk))\n\n(defn- update-history! [h]\n  (doto h\n    (.setUseFragment false)\n    (.setPathPrefix \"\")\n    (.setEnabled true)))\n\n(defn- set-retrieve-token! [t]\n  (set! (.. t -retrieveToken)\n        (fn [path-prefix location]\n          (str (.-pathname location) (.-search location))))\n  t)\n\n(defn- set-create-url! [t]\n  (set! (.. t -createUrl)\n        (fn [token path-prefix location]\n          (str path-prefix token)))\n  t)\n\n(defn new-history\n  ([]\n   (new-history (-> (TokenTransformer.) set-retrieve-token! set-create-url!)))\n  ([transformer]\n   (-> (Html5History. js/window transformer) update-history!)))\n\n(defprotocol IHistory\n  (set-token! [this token] [this token title])\n  (replace-token! [this token] [this token title])\n  (get-token [this])\n  (start! [this])\n  (stop! [this]))\n\n(defn- processable-url? [uri]\n  (and (not (clojure.string/blank? uri))                    ;; Blank URLs are not processable.\n       (or (and (not (.hasScheme uri)) (not (.hasDomain uri))) ;; By default only process relative URLs + URLs matching window's origin\n           (some? (re-matches (re-pattern (str \"^\" (.-origin js/location) \".*$\"))\n                              (str uri))))))\n\n(defn- get-token-from-uri [uri]\n  (let [path (.getPath uri)\n        query (.getQuery uri)]\n    ;; Include query string in token\n    (if (empty? query) path (str path \"?\" query))))\n\n(defn pushy\n  \"Takes in three functions:\n    * dispatch-fn: the function that dispatches when a match is found\n    * match-fn: the function used to check if a particular route exists\n    * identity-fn: (optional) extract the route from value returned by match-fn\"\n  [dispatch-fn match-fn &\n   {:keys [processable-url? identity-fn prevent-default-when-no-match?]\n    :or   {processable-url?               processable-url?\n           identity-fn                    identity\n           prevent-default-when-no-match? (constantly false)}}]\n\n  (let [history (new-history)\n        event-keys (atom nil)]\n    (reify\n      IHistory\n      (set-token! [_ token]\n        (. history (setToken token)))\n      (set-token! [_ token title]\n        (. history (setToken token title)))\n\n      (replace-token! [_ token]\n        (. history (replaceToken token)))\n      (replace-token! [_ token title]\n        (. history (replaceToken token title)))\n\n      (get-token [_]\n        (.getToken history))\n\n      (start! [this]\n        (stop! this)\n        ;; We want to call `dispatch-fn` on any change to the location\n        (swap! event-keys conj\n               (events/listen history EventType.NAVIGATE\n                              (fn [e]\n                                (when-let [match (-> (.-token e) match-fn identity-fn)]\n                                  (dispatch-fn match)))))\n\n        ;; Dispatch on initialization\n        (when-let [match (-> (get-token this) match-fn identity-fn)]\n          (dispatch-fn match))\n\n        (swap! event-keys conj\n               (on-click\n                (fn [e]\n                  (when-let [el (some-> e .-target (.closest \"a\"))]\n                    (let [uri (.parse Uri (.-href el))]\n                      ;; Proceed if `identity-fn` returns a value and\n                      ;; the user did not trigger the event via one of the\n                      ;; keys we should bypass\n                      (when (and (processable-url? uri)\n                                 ;; Bypass dispatch if any of these keys\n                                 (not (.-altKey e))\n                                 (not (.-ctrlKey e))\n                                 (not (.-metaKey e))\n                                 (not (.-shiftKey e))\n                                 ;; Bypass if target = _blank\n                                 (not (get #{\"_blank\" \"_self\"} (.getAttribute el \"target\")))\n                                 ;; Bypass if explicitly instructed to ignore this element\n                                 (or (not (.hasAttribute el \"data-pushy-ignore\"))\n                                     (= (.getAttribute el \"data-pushy-ignore\") \"false\"))\n                                 ;; Only dispatch on left button click\n                                 (= 0 (.-button e)))\n                        (let [next-token (get-token-from-uri uri)]\n                          (if (identity-fn (match-fn next-token))\n                            ;; Dispatch!\n                            (do\n                              (if-let [title (-> el .-title)]\n                                (set-token! this next-token title)\n                                (set-token! this next-token))\n                              (.preventDefault e))\n\n                            (when (prevent-default-when-no-match? next-token)\n                              (.preventDefault e))))))))))\n        nil)\n\n      (stop! [this]\n        (doseq [key @event-keys]\n          (events/unlistenByKey key))\n        (reset! event-keys nil)))))\n\n(defn supported?\n  \"Returns whether Html5History is supported\"\n  ([] (supported? js/window))\n  ([window] (.isSupported Html5History window)))\n\n;; Backwards compatibility with pushy <= 0.2.2\n(defn push-state!\n  ([dispatch-fn match-fn]\n   (push-state! dispatch-fn match-fn identity))\n  ([dispatch-fn match-fn identity-fn]\n   (let [h (pushy dispatch-fn match-fn :identity-fn identity-fn)]\n     (start! h)\n     h)))\n"]}