{"version":3,"sources":["todo/views.cljs"],"mappings":"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","names":["todo.views/todo-prompt","user","p1__28989#","p1__28990#","new-todo","reagent.core.atom","save","cljs.core/deref","cljs.core.not_EQ_","re-frame.core/dispatch","cljs.core/reset!","G__28991","todo.views/todo-item","task","color","todo.views/footer-buttons","todo.views/actual-list","todos","re_frame.core.subscribe","iter__4564__auto__","s__28993","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4562__auto__","size__4563__auto__","cljs.core/count","b__28995","cljs.core/chunk-buffer","i__28994","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28992","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/not-empty","todo.views/home-panel","todo.routes/panels","todo.views/login-panel","p1__28996#","p1__28997#","username","password","todo.views/signup-panel","p1__28998#","p1__28999#","p1__29000#","pass-confirm","todo.views/main-panel","active-panel","cljs.core/chunk-first"],"sourcesContent":["(ns todo.views\n  (:require\n    [reagent.core :as r]\n    [re-frame.core :refer [subscribe dispatch]]\n    [todo.events :as events]\n    [todo.routes :as routes]\n    [todo.subs :as subs]\n    ))\n\n(defn todo-prompt [user]\n      (let [new-todo (r/atom \"\")\n            save #(when (not= @new-todo \"\")\n                        (dispatch [:add-todo user @new-todo]))]\n           [:div\n            [:input {:type        \"text\"\n                     ;; :value       @new-todo\n                     :placeholder \"What needs to be done?\"\n                     :on-change   #(reset! new-todo (-> % .-target .-value))\n                     :on-key-down #(case (.-which %)\n                                         13 (save)\n                                         nil)}]\n            ]))\n\n(defn todo-item [user task]\n      (let [color (if (:completed task)\n                    \"#d6d5d2\"\n                    \"black\")]\n           [:li {:style {:color color}}\n            [:input {:type     \"button\"\n                     :value    \"Remove\"\n                     :on-click #(dispatch [:remove-todo user (:title task)])}]\n            [:input {:type     \"button\"\n                     :value    \"Toggle\"\n                     :on-click #(dispatch [:toggle-complete user (:title task)])}]\n            \"  \"\n            (:title task)]))\n\n(defn footer-buttons [user]\n      [:div\n       [:input {:type     \"button\"\n                :value    \"Remove All\"\n                :on-click #(dispatch [:remove-all user])}]\n       [:input {:type     \"button\"\n                :value    \"Mark all as Complete\"\n                :on-click #(dispatch [:toggle-all user true])}]\n       [:input {:type     \"button\"\n                :value    \"Mark all as Incomplete\"\n                :on-click #(dispatch [:toggle-all user false])}]])\n\n(defn actual-list [user]\n      (let [todos @(subscribe [:get-todos])]\n           [:div\n            [:ul\n             (for [task todos]\n                  ^{:key (:title task)} [todo-item user task])]\n            (when (not-empty todos)\n                  [footer-buttons user])]))\n\n(defn home-panel []\n      (let [user @(subscribe [:username])]\n           [:div\n            [:h1\n             (str \"Hello \" user \". This is your todo list\")]\n            [todo-prompt user]\n            [actual-list user]\n            [:br]\n            [:div\n             [:input {:type     \"button\"\n                      :value    \"Sign out\"\n                      :on-click #(dispatch [::events/navigate :login])}]]\n            ]))\n\n(defmethod routes/panels :home-panel [] [home-panel])\n\n;; login\n\n(defn login-panel []\n      (let [username (r/atom \"\")\n            password (r/atom \"\")]\n           [:div\n            [:h1 \"Login\"]\n            [:input {:type        \"text\"\n                     :placeholder \"Username\"\n                     :on-change   #(reset! username (-> % .-target .-value))}]\n            [:br]\n            [:input {:type        \"password\"\n                     :placeholder \"Password\"\n                     :on-change   #(reset! password (-> % .-target .-value))}]\n            [:br]\n            [:input {:type     \"button\"\n                     :value    \"Login\"\n                     :on-click #(dispatch [:submit-login @username @password])\n                     }]\n            [:div\n             \"Don't have an account? \"\n             [:input {:type     \"button\"\n                      :value    \"Sign up here\"\n                      :on-click #(dispatch [::events/navigate :signup])}]]]))\n\n(defmethod routes/panels :login-panel [] [login-panel])\n\n;; signup\n\n(defn signup-panel []\n      (let [username (r/atom \"\")\n            password (r/atom \"\")\n            pass-confirm (r/atom \"\")]\n           [:div\n            [:h1 \"Make an account\"]\n            [:input {:type        \"text\"\n                     :placeholder \"Username\"\n                     :on-change   #(reset! username (-> % .-target .-value))}]\n            [:br]\n            [:input {:type        \"password\"\n                     :placeholder \"Password\"\n                     :on-change   #(reset! password (-> % .-target .-value))}]\n            [:br]\n            [:input {:type        \"password\"\n                     :placeholder \"Confirm Password\"\n                     :on-change   #(reset! pass-confirm (-> % .-target .-value))}]\n            [:br]\n            [:input {:type     \"button\"\n                     :value    \"Create account\"\n                     :on-click #(dispatch [:create-account @username @password @pass-confirm])\n                     }]\n            [:div\n             \"Already have an account? \"\n             [:input {:type     \"button\"\n                      :value    \"Login here\"\n                      :on-click #(dispatch [::events/navigate :login])}]]]))\n\n(defmethod routes/panels :signup-panel [] [signup-panel])\n\n;; main\n\n(defn main-panel []\n      (let [active-panel (subscribe [::subs/active-panel])]\n           (routes/panels @active-panel)))\n"]}