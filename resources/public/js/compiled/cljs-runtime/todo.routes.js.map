{"version":3,"sources":["todo/routes.cljs"],"mappings":";AAOA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAUS;AAAVR,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAJ,AAAAL,AAAAE,AAAAC,AAAAC,AAAiBO;;;AACjB,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA;;AAEA,AAAKE,AACH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACX;AAKH,AAAA,AAAMY,AACHC;AADH,AAEE,AAAA,AAAAC,AAACC,AAAkBJ,AAAOE;;AAE5B,AAAA,AAAA,AAAAG,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACDI;AADL,AAEE,AAACC,AAAMC,AAAc,AAAA,AAAA,AAAAd,AAACe,AAAOlB,AAAQe;;;AAFvC,AAAA,AAAA,AAAMJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAIA,AAAA,AAAMO,AACHC;AADH,AAEE,AAAMC,AAAM,AAACC,AAAQ,AAAA,AAAK,AAACC,AAAK,AAAA,AAAUH;AAA1C,AACE,AAAA,AAAA,AAACI,AAA6CH;;AAElD,AAAKI,AACH,AAACC,AAAYP,AAASlB;AAExB,AAAA,AAAM0B,AACHC;AADH,AAEE,AAAkBH,AAAQ,AAACI,AAAQD;;AAErC,AAAA,AAAME;AAAN,AAEE,AAAcL;;AAEhB,AAAA,AAACM,AAEC,AAAKH;AAAL,AACE,AAACD,AAAUC","names":["js/todo","js/todo.routes","js/todo.routes.panels","method-table__4654__auto__","cljs.core.atom","prefer-table__4655__auto__","method-cache__4656__auto__","cached-hierarchy__4657__auto__","hierarchy__4658__auto__","cljs.core.get","fexpr__28953","cljs.core/MultiFn","cljs.core.symbol","todo.routes/panels","cljs.core/identity","todo.routes/routes","todo.routes/parse","url","cljs.core/deref","bidi.bidi/match-route","var_args","args__4777__auto__","len__4771__auto__","i__4772__auto__","argseq__4778__auto__","cljs.core/IndexedSeq","todo.routes/url-for","seq28954","self__4759__auto__","cljs.core/seq","args","cljs.core.apply","bidi.bidi/path-for","cljs.core.into","todo.routes/dispatch","route","panel","cljs.core.keyword","cljs.core/name","re-frame.core/dispatch","todo.routes/history","pushy.core/pushy","todo.routes/navigate!","handler","todo.routes.url_for","todo.routes/start!","re-frame.core/reg-fx"],"sourcesContent":["(ns todo.routes\n  (:require\n   [bidi.bidi :as bidi]\n   [pushy.core :as pushy]\n   [re-frame.core :as re-frame]\n   [todo.events :as events]))\n\n(defmulti panels identity)\n(defmethod panels :default [] [:div \"No panel found for this route.\"])\n\n(def routes\n  (atom\n    [\"/\" {\"\"      :login\n          \"home\" :home\n          \"signup\" :signup}]))\n\n(defn parse\n  [url]\n  (bidi/match-route @routes url))\n\n(defn url-for\n  [& args]\n  (apply bidi/path-for (into [@routes] args)))\n\n(defn dispatch\n  [route]\n  (let [panel (keyword (str (name (:handler route)) \"-panel\"))]\n    (re-frame/dispatch [::events/set-active-panel panel])))\n\n(def history\n  (pushy/pushy dispatch parse))\n\n(defn navigate!\n  [handler]\n  (pushy/set-token! history (url-for handler)))\n\n(defn start!\n  []\n  (pushy/start! history))\n\n(re-frame/reg-fx\n  :navigate\n  (fn [handler]\n    (navigate! handler)))\n"]}