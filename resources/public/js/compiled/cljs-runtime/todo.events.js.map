{"version":3,"sources":["todo/events.cljs"],"mappings":"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","names":["todo.events/ls-key","todo.events/write-to-ls","re-frame.core/after","db","js/localStorage","todo.events/interceptors","re-frame.core/reg-cofx","cofx","_","cljs.core.assoc","cljs.reader.read_string","re_frame.core.reg_event_fx","re_frame.core.inject_cofx","p__28908","map__28909","cljs.core/--destructure-map","cljs.core.get","local-store","p__28910","vec__28911","cljs.core.nth","handler","p__28914","p__28915","map__28916","vec__28917","active-panel","todo.events/->keyword","str","cljs.core.keyword","clojure.string/replace","re_frame.core.reg_event_db","p__28920","vec__28921","username","p__28924","vec__28925","password","user","cljs.core._EQ_","re-frame.core/dispatch","js/alert","todo.events/new-account","p__28928","vec__28929","pass-confirm","cljs.core/assoc-in","p__28932","vec__28933","task","p__28936","vec__28937","cljs.core.update_in","cljs.core/dissoc","p__28940","vec__28941","cljs.core/not","p__28944","vec__28945","p__28949","vec__28950","status","p1__28948#","cljs.core/reduce-kv","m","k","v"],"sourcesContent":["(ns todo.events\n  (:require\n    [re-frame.core :as re-frame]\n    [todo.db :as db]\n    [cljs.reader]\n    ))\n\n;; interceptors\n(def ls-key \"todo-app\")\n(def write-to-ls\n  (re-frame/after (fn [db] (.setItem js/localStorage ls-key (str db)))))\n(def interceptors [write-to-ls])\n\n(re-frame/reg-cofx\n  :local-store\n  (fn [cofx _]\n      (assoc cofx\n             :local-store\n             (cljs.reader/read-string (.getItem js/localStorage ls-key)))))\n\n;; db initializer\n(re-frame/reg-event-fx\n  ::initialize-db\n  [(re-frame/inject-cofx :local-store)]\n  (fn [{:keys [db local-store]} _]\n      {:db local-store}))\n\n(re-frame/reg-event-fx\n  ::navigate\n  (fn [_ [_ handler]]\n      {:navigate handler}))\n\n(re-frame/reg-event-fx\n  ::set-active-panel\n  [write-to-ls]\n  (fn [{:keys [db]} [_ active-panel]]\n      {:db (assoc db :active-panel active-panel)}))\n\n;; keyword solution that handles spaces\n(defn ->keyword [str]\n      (keyword (clojure.string/replace str #\" \" \"-\")))\n\n; login\n\n(re-frame/reg-event-db\n  :set-active-user\n  [write-to-ls]\n  (fn [db [_ username]]\n      (assoc db :active-user username)))\n\n(re-frame/reg-event-db\n  :submit-login\n  [write-to-ls]\n  (fn [db [_ username password]]\n      (let [user (get (:users db) (->keyword username))]\n           (if user\n             (if (= password (:password user))\n               (do (re-frame/dispatch [:set-active-user username])\n                   (re-frame/dispatch [::navigate :home])\n                   db)\n               (do (js/alert \"Password is incorrect\") db))\n             (do (js/alert \"User does not exist.\") db)))\n      ))\n\n;; creating a new account\n(defn new-account [username password]\n      {:username username :password password :todo-list {}})\n\n(re-frame/reg-event-db\n  :create-account\n  [write-to-ls]\n  (fn [db [_ username password pass-confirm]]\n      (if (= password pass-confirm)\n        (if (get (:users db) (->keyword username))\n          (do (js/alert \"Username already exists.\") db)\n          (do (js/alert \"Account sucessfully created!\")\n              (re-frame/dispatch [:set-active-user username])\n              (re-frame/dispatch [::navigate :home])\n              (assoc-in db [:users (->keyword username)] (new-account username password))))\n        (do (js/alert \"Passwords much match.\") db))))\n\n(re-frame/reg-event-db\n  :status\n  (fn [db _]\n      (js/alert (str \"this is the current db: \" db))\n      db))\n\n;; TODO functions\n\n(re-frame/reg-event-db\n  :add-todo\n  [write-to-ls]\n  (fn [db [_ user task]]\n      (assoc-in db [:users (->keyword user) :todo-list (->keyword task)] {:title task :completed false})))\n\n(re-frame/reg-event-db\n  :remove-todo\n  [write-to-ls]\n  (fn [db [_ user task]]\n      (update-in db [:users (->keyword user) :todo-list] dissoc (->keyword task))))\n\n(re-frame/reg-event-db\n  :toggle-complete\n  [write-to-ls]\n  (fn [db [_ user task]]\n      (update-in db [:users (->keyword user) :todo-list (->keyword task) :completed] not)))\n\n(re-frame/reg-event-db\n  :remove-all\n  [write-to-ls]\n  (fn [db [_ user]]\n      (assoc-in db [:users (->keyword user) :todo-list] {})))\n\n(re-frame/reg-event-db\n  :toggle-all\n  [write-to-ls]\n  (fn [db [_ user status]]\n      (update-in db [:users (->keyword user) :todo-list]\n                 #(reduce-kv (fn [m k v]\n                                 (assoc m k (assoc v :completed status)))\n                             {}\n                             %))))"]}